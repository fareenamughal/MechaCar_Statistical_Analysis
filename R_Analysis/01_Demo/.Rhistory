Name,Vehicle_Class,Year,Total_Miles
John,Compact_Sedan,2012,87456
Claire,Pickup,2017,15022
Xavier,SUV,2019,4532
Kerri,Subcompact_Sedan,2018,12349
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
library(readr)
demo <- read_csv("01_Demo/demo.csv")
View(demo)
View(demo)
View(demo)
load("~/Desktop/BOOTCAMP 20220822/R_Analysis/01_Demo/demo.json")
demo_table2 <- fromJSON(txt='demo.json')
load("~/Desktop/BOOTCAMP 20220822/R_Analysis/01_Demo/demo.json")
demo_table2 <- fromJSON(txt='demo.json')
load("~/Desktop/BOOTCAMP 20220822/R_Analysis/01_Demo/demo.json")
demo_table2 <- fromJSON(txt='demo.json')
load("~/Desktop/BOOTCAMP 20220822/R_Analysis/01_Demo/demo.json")
demo_table2 <- fromJSON(txt='demo.json')
load("~/Desktop/BOOTCAMP 20220822/R_Analysis/01_Demo/demo.json")
demo_table2 <- fromJSON(txt='demo.json')
load("~/Desktop/BOOTCAMP 20220822/R_Analysis/01_Demo/demo.json")
demo_table2 <- fromJSON(txt='demo.json')
demo <- read.csv("~/Desktop/BOOTCAMP 20220822/R_Analysis/01_Demo/demo.json", header=FALSE)
View(demo)
demo_table2 <- fromJSON(txt='demo.json')
demo_table2 <- fromJSON(txt='demo.json')
load("~/Desktop/BOOTCAMP 20220822/R_Analysis/01_Demo/demo.json")
demo_table2 <- fromJSON(txt='demo.json')
library(readr)
demo <- read_csv("01_Demo/demo.json")
View(demo)
demo_table2 <- fromJSON(txt='demo.json')
install.packages("jsonlite")
install.packages("jsonlite")
load("~/Desktop/BOOTCAMP 20220822/R_Analysis/01_Demo/demo.json")
demo_table2 <- fromJSON(txt='demo.json')
load("~/Desktop/BOOTCAMP 20220822/R_Analysis/01_Demo/demo.json")
demo_table2 <- fromJSON(txt='demo.json')
setwd("~/Desktop/BOOTCAMP 20220822/R_Analysis")
library(tidyverse)
?mutate()
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
gc()
setwd("~/Desktop/BOOTCAMP 20220822/R_Analysis/01_Demo")
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
setwd("~/Desktop/BOOTCAMP 20220822/R_Analysis")
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
setwd("~/Desktop/BOOTCAMP 20220822/R_Analysis/01_Demo")
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
library(jsonlite)
library(package)
library.(jsonlite)
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
x <- c(3,3,2,2,5,5,8,8,9)
x[3]
demo_table[3,3]
demo_table$"Vehicle_Class"
filter_table <- demo_table2[demo_table2$price . 10000,]
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
View(filter_table)
View(demo_table2)
View(demo_table)
View(demo_table2)
View(demo_table2)
View(filter_table)
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status)
View(filter_table2)
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
View(filter_table3)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
demo_table[sample(1:nrow(demo_table), 3),]
demo_table <- demo_table %>%mutate(Mileage_per_Tear=Total_Miles/(2020-Year),IsActive=True)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=True)
rlang::last_error()
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=True)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
View(filter_table3)
View(filter_table2)
View(demo_table)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep')
View(summarize_demo)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep')
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
View(demo_table3)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
View(long_table)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
wide_table <- long_table %>% spread(key="Metric",value="Score")
View(wide_table)
all.equal(demo_table3, wide_table)
table <-demo_table3[,order(colnames(wide_table))]
View(wide_table)
table <- demo_table3[,(colnames(wide_table))]
View(demo_table2)
View(wide_table)
head(mpg)
plt <-ggplot(mpg,aes(x=class))
View(plt)
plt + geom_bar()
View(plt)
>mpg_summary <-mpg %>%group_by(manufacturer)%>%summarize(Vehicle_Count=n(),.groups ='keep')
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
View(mpg_summary)
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
View(plt)
View(plt)
View(plt)
View(plt)
View(plt)
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
plt +geom_col()+xlab("Manufacturing Company")+ylab("Number of Vehicles in Dataset")+>theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
theme(axis.text.x=element_text(angle=45,hjust=1))
theme(axis.text.x=element_text(num=45,hjust=1))
theme(axis.text.x=element_text(num(45),hjust=1))
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") +
theme(axis.text.x=element_text(angle=45,hjust=1))
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(16:30))
plt + geom_line() + scale_x_discrete(factor=c(4,6,8)) + scale_y_continuous(breaks = c(16:30))
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
plt + geom_line()
library(tidyselect)
library(scales)
library(shape)
library(readxl)
library(progress)
library(prettyunits)
library(png)
library(labeling)
library(grid)
library(dtplyr)
library(data.table)
library(cli)
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(16:30))
clear
clean
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
plt + geom_line()
library(polygon)
polylineGrob()
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(16:30))
limits = factor(...)
View(demo_table)
View(demo_table2)
View(demo_table3)
View(filter_table2)
View(filter_table)
View(filter_table3)
View(plt)
View(summarize_demo)
View(table)
View(wide_table)
library(ggplot2)
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(16:30))
scale_*_continuous()
limits = factor(...)
View(mpg_summary)
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(16:30))
plt <- ggplot(mpg,aes(x=displ,y=cty))
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
quartz()
ggplot(train, aes(x = pclass, fill = factor(survived))) +
geom_bar() +
xlab("Pclass") +
ylab("Total Count") +
labs(fill = "Survived") +
theme(text=element_text(family="Garamond", size=14))
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(16:30))
plt + geom_line() + scale_x_continuous(limits=c(4,6,8)) + scale_y_continuous(breaks = c(16:30))
View(mpg_summary)
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(16:30))
plt + geom_line() + scale_*_continuous(limits=c(4,6,8)) + scale_y_continuous(breaks = c(16:30))
